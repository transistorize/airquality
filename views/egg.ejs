<!DOCTYPE html>
<meta charset="utf-8">
<title>egg_data_crossfilter</title>
    <link href="/css/bootstrap.min.css" rel="stylesheet" media="screen">
    <link href="/css/aqeeggs.css" rel="stylesheet" media="screen">
    <link href="/css/style.css" rel="stylesheet" media="screen">    
<style>

@import url(http://fast.fonts.net/jsapi/e6087e24-2280-44b0-a660-e3e0ff2fdb19.js);

#charts {
  padding: 10px 0;
}

.chart {
  display: inline-block;
  margin-bottom: 10px;
  width: 400px;
  height: 100px;
}

.reset {
  padding-left: 1em;
  font-size: smaller;
  color: #ccc;
}

.background.bar {
  fill: #ccc;
}

.foreground.bar {
  fill: #00daff;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text {
  font: 10px sans-serif;
}

.brush rect.extent {
  fill: #00daff;
  fill-opacity: .125;
}

.brush .resize path {
  fill: #eee;
  stroke: #666;
}

#COegg, #NO2egg, #VOCegg{
  display: inline-block;
  width:200px;
}

#reading-list {
  min-height: 200px;
}

#reading-list .date,
#reading-list .day {
  margin-bottom: .4em;
}

#reading-list .reading {
  line-height: 1.5em;
  background: #eee;
  width: 640px;
  margin-bottom: 1px;
}

#reading-list .time {
  color: #999;
}

#reading-list .reading div {
  display: inline-block;
  width: 100px;
}

#reading-list div.distance,
#reading-list div.delay {
  width: 160px;
  padding-right: 10px;
  text-align: right;
}

#reading-list .early {
  color: green;
}

aside {
  position: absolute;
  left: 740px;
  font-size: smaller;
  width: 220px;
}

</style>

<div id="body">
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <div class="nav-collapse collapse">
            <ul class="nav">
              <li class="active"><a href="/index.html">Egg Sitting</a></li>
              <li><a href="/index.html#map">All Eggs</a></li>
              <li><a href="/CO.html">Carbon Monoxide (C0)</a></li>
              <li><a href="/NO2.html">Nitrogen Dioxide (NO2)</a></li>
              <li><a href="/VOC.html">Volatile Organic Compounds (VOC)</a></li>
              <li><a href="/form.html">Add An Egg</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <h2><strong>Egg: <%= platformName %> </strong></h2>


<div id="charts">
 <!-- <div id="hour-chart" class="chart">
    <div class="title">Readings Per Hour</div>
  </div>  -->
  <h4>Carbon Monoxide (CO)</h4>
  <div id="COegg">
    <div class="title"></div>
  </div>
  <div id="delay-chart" class="chart">
    <div class="title"></div>
  </div> <br>
  <h4>Nitrogen Dioxide (NO2)</h4>
  <div id="NO2egg">
    <div class="title"></div>
  </div>
  <div id="distance-chart" class="chart">
    <div class="title"></div>
  </div> <br>
  <h4>Volatile Organic Compounds (VOC)</h4>
  <div id="VOCegg">
    <div class="title"></div>
  </div>
  <div id="date-chart" class="chart">
    <div class="title"></div>
  </div> <br>
  <h4>Temperature & Humidity</h4>
  <div id="temp-chart" class="chart">
    <div class="title">Temperature</div>
  </div>
  <div id="humidity-chart" class="chart">
    <div class="title">Humidity</div>
  </div>
</div>

<aside id="totals"><span id="active">-</span> of <span id="total">-</span> readings selected.</aside>

<div id="lists">
  <div id="reading-list" class="list"></div>
</div>

</div>

<script src="/js/crossfilter.min.js"></script>
<script src="/js/d3.v3.min.js"></script>
<script>
var uid = "<%= platformUid %>";
var egg = [];

//d3.json("http://ghostmap.mit.edu/kdmn/eggs/uid/bd0a8296-b002-51a9-be0f-018feea0ee38/data"), function(error, readings){
d3.json("/eggs/uid/" + uid + "/data", function (error, readings){
  //if (error) return console.warn(error);
  //console.log(readings);
  readings.data.map(function(d) {
     egg.push({
      date: new Date(d.ts),
      CO: d.co,
      NO2: d.no2,
      VOC: d.voc,
      temperature: d.temp_degc,
      humidity: d.humidity
    });
  });
    console.log(egg);

  // Various formatters.
  var formatNumber = d3.format(",d"),
      formatChange = d3.format("+,d"),
      formatDate = d3.time.format.utc("%Y-%m-%dT"),
      formatTime = d3.time.format.utc("%H:%M:%SZ");

  var parseDate = d3.time.format.utc("%Y-%m-%dT%H:%M:%SZ").parse;

  // A nest operator, for grouping the reading list.
  var nestByDate = d3.nest()
      .key(function(d) { return d3.time.day(d.date); });

  // Create the crossfilter for the relevant dimensions and groups.
  var reading = crossfilter(egg),
      all = reading.groupAll(),
      date = reading.dimension(function(d) { return d.date; }),
      dates = date.group(d3.time.day),
      hour = reading.dimension(function(d) { return d.date.getHours() + d.date.getMinutes() / 60; }),
      hours = hour.group().reduceCount(),
      CO = reading.dimension(function(d) { return d.CO; }),
      COgroup = CO.group().reduceCount(),
      NO2 = reading.dimension(function(d) { return d.NO2; }),
      NO2group = NO2.group().reduceCount(),
      VOC = reading.dimension(function(d) { return d.VOC; }),
      VOCgroup = VOC.group().reduceCount(),
      temperature = reading.dimension(function(d) { return d.temperature; }),
      tempgroup = temperature.group().reduceCount(),
      humidity = reading.dimension(function(d) { return d.humidity; }),
      humidgroup = humidity.group().reduceCount();
 
 //means
  var allCO = egg.map(function(d){
    return d.CO;
  });
  var avgCO = d3.mean(allCO);
  
  var allNO2 = egg.map(function(d){
    return d.NO2;
  });
  var avgNO2 = d3.mean(allNO2);

  var allVOC = egg.map(function(d){
    return d.VOC;
  });
  var avgVOC = d3.mean(allVOC);

//charts
  var charts = [

   /* barChart()
        .dimension(hour)
        .group(hours)
      .x(d3.scale.linear()
        .domain([0, 24])
        .rangeRound([0, 10 * 24])),*/

    barChart()
        .dimension(CO)
        .group(COgroup)
      .x(d3.scale.linear()
        .domain([400, 1000])
        .rangeRound([0, 20 * 21])),

    barChart()
        .dimension(NO2)
        .group(NO2group)
      .x(d3.scale.linear()
        .domain([0, 500])
        .rangeRound([0, 20* 21])),

    barChart()
        .dimension(VOC)
        .group(VOCgroup)
        .round(d3.time.day.round)
      .x(d3.scale.linear()
        .domain([525,850])
        .rangeRound([0, 20 * 21])),

    barChart()
        .dimension(temperature)
        .group(tempgroup)
      .x(d3.scale.linear()
        .domain([18, 40])
        .rangeRound([0, 10 * 20])),

    barChart()
        .dimension(humidity)
        .group(humidgroup)
      .x(d3.scale.linear()
        .domain([25, 85])
        .rangeRound([0, 10 * 25])),

  ];

  // Given our array of charts, which we assume are in the same order as the
  // .chart elements in the DOM, bind the charts to the DOM and render them.
  // We also listen to the chart's brush events to update the display.
  var chart = d3.selectAll(".chart")
      .data(charts)
      .each(function(chart) { chart.on("brush", renderAll).on("brushend", renderAll); });

  // Render the initial lists.
  var list = d3.selectAll(".list")
      .data([readingList]);

  // Render the total.
  d3.selectAll("#total")
      .text(formatNumber(reading.size()));


  //eggs
  var egg1 = d3.select('#COegg')  // selects the parent DOM node, once by ID using the # symbol
    .selectAll('svg')             // select all svg children nodes, first time there are none
    .data([avgCO])                // bind the selection above to this data array, must be an array of the single value
    .enter().append('svg')        // when calculating the 'enter' state change, append an svg element for each new data item
      .attr('width', 150)         // attach these attributes to any new SVG elements created
      .attr('height', 200)
      .attr('class', 'pie');      // returns a special selection array with all the DOM nodes that were just created

egg1.append('ellipse')
    .attr('cx', 75)
    .attr('cy', 100)
    .attr('rx', function(d) { return d/Math.sqrt(d)*2; })
    .attr('ry', function(d) { return d/(Math.sqrt(d)*4/5)*2; })
    .style('fill', "#00daff" );

var egg2 = d3.select('#NO2egg').selectAll('svg')
    .data([avgNO2])
    .enter().append('svg')
      .attr('width', 150)
      .attr('height', 200)
      .attr('class', 'pie');

egg2.append('ellipse')
    .attr('cx', 75)
    .attr('cy', 100)
    .attr('rx', function(d) { return d/Math.sqrt(d)*2; })
    .attr('ry', function(d) { return d/(Math.sqrt(d)*4/5)*2; })
    .style('fill', "#00daff" );

var egg3 = d3.select('#VOCegg').selectAll('svg')
    .data([avgVOC])
    .enter().append('svg')
      .attr('width', 150)
      .attr('height', 200)
      .attr('class', 'pie');

egg3.append('ellipse')
    .attr('cx', 75)
    .attr('cy', 100)
    .attr('rx', function(d) { return Math.abs(d)/Math.sqrt(d)*2; })
    .attr('ry', function(d) { return Math.abs(d)/(Math.sqrt(d)*4/5)*2; })
    .style('fill', "#00daff" );

renderAll();



  // Renders the specified chart or list.
  function render(method) {
    d3.select(this).call(method);
  }

  // Whenever the brush moves, re-rendering everything.
  function renderAll() {
    chart.each(render);
    list.each(render);
    d3.select("#active").text(formatNumber(all.value()));
  }

  // Like d3.time.format, but faster.
  function parseDate(d) {
    d3.time.format.utc(d).parse;
  }

  window.filter = function(filters) {
    filters.forEach(function(d, i) { charts[i].filter(d); });
    renderAll();
  };

  window.reset = function(i) {
    charts[i].filter(null);
    renderAll();
  };

  function readingList(div) {
    var readingsByDate = nestByDate.entries(date.top(40));

    div.each(function() {
      var date = d3.select(this).selectAll(".date")
          .data(readingsByDate, function(d) { return d.reading; });

      date.enter().append("div")
          .attr("class", "date")
        .append("div")
          .attr("class", "day")
          .text(function(d) { return parseDate(d.values[0].date); });

      date.exit().remove();

      var reading = date.order().selectAll(".reading")
          .data(function(d) { return d.values; }, function(d) { return d.index; });

      var readingEnter = reading.enter().append("div")
          .attr("class", "reading");

      readingEnter.append("div")
          .attr("class", "time")
          .text(function(d) { return formatTime(d.date); });

      readingEnter.append("div")
          .attr("class", "origin")
          .text(function(d) { return d.origin; });

      readingEnter.append("div")
          .attr("class", "destination")
          .text(function(d) { return d.destination; });

      readingEnter.append("div")
          .attr("class", "distance")
          .text(function(d) { return formatNumber(d.distance) + " mi."; });

      readingEnter.append("div")
          .attr("class", "delay")
          .classed("early", function(d) { return d.delay < 0; })
          .text(function(d) { return formatChange(d.delay) + " min."; });

      reading.exit().remove();

      reading.order();
    });
  }

  function barChart() {
    if (!barChart.id) barChart.id = 0;

    var margin = {top: 10, right: 10, bottom: 20, left: 10},
        x,
        y = d3.scale.linear().range([50, 0]),
        id = barChart.id++,
        axis = d3.svg.axis().orient("bottom"),
        brush = d3.svg.brush(),
        brushDirty,
        dimension,
        group,
        round;

    function chart(div) {
      var width = x.range()[1],
          height = y.range()[0];

      y.domain([0, group.top(1)[0].value]);

      div.each(function() {
        var div = d3.select(this),
            g = div.select("g");

        // Create the skeletal chart.
        if (g.empty()) {
          div.select(".title").append("a")
              .attr("href", "javascript:reset(" + id + ")")
              .attr("class", "reset")
              .text("reset")
              .style("display", "none");

          g = div.append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          g.append("clipPath")
              .attr("id", "clip-" + id)
            .append("rect")
              .attr("width", width)
              .attr("height", height);

          g.selectAll(".bar")
              .data(["background", "foreground"])
            .enter().append("path")
              .attr("class", function(d) { return d + " bar"; })
              .datum(group.all());

          g.selectAll(".foreground.bar")
              .attr("clip-path", "url(#clip-" + id + ")");

          g.append("g")
              .attr("class", "axis")
              .attr("transform", "translate(0," + height + ")")
              .call(axis);

          // Initialize the brush component with pretty resize handles.
          var gBrush = g.append("g").attr("class", "brush").call(brush);
          gBrush.selectAll("rect").attr("height", height);
          gBrush.selectAll(".resize").append("path").attr("d", resizePath);
        }

        // Only redraw the brush if set externally.
        if (brushDirty) {
          brushDirty = false;
          g.selectAll(".brush").call(brush);
          div.select(".title a").style("display", brush.empty() ? "none" : null);
          if (brush.empty()) {
            g.selectAll("#clip-" + id + " rect")
                .attr("x", 0)
                .attr("width", width);
          } else {
            var extent = brush.extent();
            g.selectAll("#clip-" + id + " rect")
                .attr("x", x(extent[0]))
                .attr("width", x(extent[1]) - x(extent[0]));
          }
        }

        g.selectAll(".bar").attr("d", barPath);
      });

      function barPath(groups) {
        var path = [],
            i = -1,
            n = groups.length,
            d;
        while (++i < n) {
          d = groups[i];
          path.push("M", x(d.key), ",", height, "V", y(d.value), "h9V", height);
        }
        return path.join("");
      }

      function resizePath(d) {
        var e = +(d == "e"),
            x = e ? 1 : -1,
            y = height / 3;
        return "M" + (.5 * x) + "," + y
            + "A6,6 0 0 " + e + " " + (6.5 * x) + "," + (y + 6)
            + "V" + (2 * y - 6)
            + "A6,6 0 0 " + e + " " + (.5 * x) + "," + (2 * y)
            + "Z"
            + "M" + (2.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8)
            + "M" + (4.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8);
      }
    }

    brush.on("brushstart.chart", function() {
      var div = d3.select(this.parentNode.parentNode.parentNode);
      div.select(".title a").style("display", null);
    });

    brush.on("brush.chart", function() {
      var g = d3.select(this.parentNode),
          extent = brush.extent();
      if (round) g.select(".brush")
          .call(brush.extent(extent = extent.map(round)))
        .selectAll(".resize")
          .style("display", null);
      g.select("#clip-" + id + " rect")
          .attr("x", x(extent[0]))
          .attr("width", x(extent[1]) - x(extent[0]));
      dimension.filterRange(extent);
    });

    brush.on("brushend.chart", function() {
      if (brush.empty()) {
        var div = d3.select(this.parentNode.parentNode.parentNode);
        div.select(".title a").style("display", "none");
        div.select("#clip-" + id + " rect").attr("x", null).attr("width", "100%");
        dimension.filterAll();
      }
    });

    chart.margin = function(_) {
      if (!arguments.length) return margin;
      margin = _;
      return chart;
    };

    chart.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      axis.scale(x);
      brush.x(x);
      return chart;
    };

    chart.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return chart;
    };

    chart.dimension = function(_) {
      if (!arguments.length) return dimension;
      dimension = _;
      return chart;
    };

    chart.filter = function(_) {
      if (_) {
        brush.extent(_);
        dimension.filterRange(_);
      } else {
        brush.clear();
        dimension.filterAll();
      }
      brushDirty = true;
      return chart;
    };

    chart.group = function(_) {
      if (!arguments.length) return group;
      group = _;
      return chart;
    };

    chart.round = function(_) {
      if (!arguments.length) return round;
      round = _;
      return chart;
    };

    return d3.rebind(chart, brush, "on");
  }
});

</script>
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="/js/bootstrap.min.js"></script>
